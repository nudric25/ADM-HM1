# -*- coding: utf-8 -*-
"""ADM-HM1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X_kek3luUrB99HOGaJ43Lx3iapilFDiL

#Say "Hello, World!" With Python
"""

if __name__ == '__main__':
    print("Hello, World!")

"""#Python If-Else

"""

import math
import os
import random
import re
import sys



if __name__ == '__main__':
    n= int(input().strip())
if not n % 2==0:
       print("Weird")
else:
    if n in range(2,6):
        print("Not Weird")
    if n in range (6,21):
        print ("Weird")
    if n >20:
        print("Not Weird")

"""#Arithmetic Operators

"""

if __name__ == '__main__':
    a = int(input())
    b = int(input())
    def somma (a,b):
        print(a+b)
    def sottrazione (a,b):
        print (a-b)
    def prodotto (a,b):
        print(a*b)
somma(a,b)
sottrazione(a,b)
prodotto(a,b)

"""#Python: Division

"""

if __name__ == '__main__':
    a = int(input())
    b = int(input())

print(a//b)
print(a/b)

"""#Loops

"""

if __name__ == '__main__':
    n = int(input())
for i in range (0,n):
    print(i**2)

"""#Write a function

"""

def is_leap(year):

    if year % 4 == 0:
        if year % 100 != 0 or year % 400 == 0:
            return True
    return False

"""#Print Function

"""

if __name__ == '__main__':
    n = int(input())
for n in range (1,n+1):
    print (n, end="")

"""#List Comprehensions

"""

if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
coord= [[i, j, k] for i in range(x+1) for j in range (y+1) for k in range (z+1) if i+j+k !=n]

print(coord)

"""#Find the Runner-Up Score!

"""

if __name__ == '__main__':
    n = int(input())
    scores = list(map(int, input().split()))
    runner_up_score = sorted(set(scores))[-2]
    print(runner_up_score)

"""#Nested Lists

"""

if __name__ == '__main__':
    students = []


    n = int(input())
    for _ in range(n):
        name = input()
        score = float(input())
        students.append([name, score])


    scores = sorted(set([student[1] for student in students]))
    second_lowest = scores[1]


    second_lowest_students = [student[0] for student in students if student[1] == second_lowest]


    second_lowest_students.sort()


    for student in second_lowest_students:
        print(student)

"""#collections.Counter()

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
X=int(input())
size_available=list(map(int, input().split()))
N=int(input())
earnings= 0
for i in range (N):
    dim_prezzo= list(map(int, input().split()))
    if dim_prezzo[0] in size_available:
        size_available.remove(dim_prezzo[0])
        earnings+= dim_prezzo[1]
    else:
        earnings+=0
print(earnings)

"""#DefaultDict Tutorial

"""

n_m = list(map(int, input().split()))

A = []
for i in range(n_m[0]):
    A.append(input())

B = []
for j in range(n_m[1]):
    B.append(input())

for k in range(len(B)):
    lista = []
    trovato = False
    for i in range(len(A)):
        if B[k] == A[i]:
            lista.append(i + 1)
            trovato = True
    if not trovato:
        print(-1)
    else:
        print(" ".join(map(str, lista)))

"""#Collections.namedtuple()

"""

# Enter your code here. Read input from STDIN. Print output to STDOU
from collections import namedtuple
n, columns = int(input()), input().split()
Student = namedtuple('Student', columns)
print(f"{sum([int(Student(*input().split()).MARKS) for _ in range(n)])/n:.2f}")

"""#Collections.OrderedDict()

"""

from collections import OrderedDict

N = int(input())
ordered_dictionary = OrderedDict()

for i in range(N):
    nome, prezzo = input().rsplit(' ', 1)
    prezzo = int(prezzo)
    if nome in ordered_dictionary:
        ordered_dictionary[nome] += prezzo
    else:
        ordered_dictionary[nome] = prezzo

for name, price in ordered_dictionary.items():
    print(f"{name} {price}")

"""#Word Order

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from collections import OrderedDict

N = int(input())
conteggio_parole = OrderedDict()

for _ in range(N):
    parola = input().strip()
    if parola in conteggio_parole:
        conteggio_parole[parola] += 1
    else:
        conteggio_parole[parola] = 1

print(len(conteggio_parole))
print(" ".join(map(str, conteggio_parole.values())))

"""#Collections.deque()

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import collections
deque = collections.deque()
for _ in range(int(input())):
    try:
        function, *key = input().split()
        getattr(deque, function)(*key)
    except ValueError:
        function = str(input())
        getattr(deque, function)()
print(*deque)

"""#Piling Up!

"""

from collections import deque

T = int(input())
for _ in range(T):
    n = int(input())
    a = deque(map(int, input().split()))
    b = []

    while a:

        if a[0] >= a[-1]:
            b.append(a.popleft())
        else:
            b.append(a.pop())


    if b == sorted(b, reverse=True):
        print("Yes")
    else:
        print("No")

"""#Company Logo

"""

from collections import Counter

if __name__ == '__main__':
    s = input().strip()
    char_count = Counter(s)
    sorted_chars = sorted(char_count.items(), key=lambda x: (-x[1], x[0]))

    for char, count in sorted_chars[:3]:
        print(char, count)

"""#Lists

"""

if __name__ == '__main__':
    N = int(input())
    lst = []

    for _ in range(N):
        command = input().split()
        if command[0] == "insert":
            lst.insert(int(command[1]), int(command[2]))
        elif command[0] == "print":
            print(lst)
        elif command[0] == "remove":
            lst.remove(int(command[1]))
        elif command[0] == "append":
            lst.append(int(command[1]))
        elif command[0] == "sort":
            lst.sort()
        elif command[0] == "pop":
            lst.pop()
        elif command[0] == "reverse":
            lst.reverse()

"""#Tuples

"""

if __name__ == '__main__':
    n = int(input())
    lista_interi = tuple(map(int, input().split()))
    print(hash(lista_interi))

"""#Finding the percentage

"""

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    average = sum(student_marks[query_name]) / len(student_marks[query_name])
    print(f"{average:.2f}")

"""#Array Mathematics

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy as np

n, m = map(int, input().split())


array1 = np.array([input().split() for i in range(n)], int)
array2 = np.array([input().split() for j in range(n)], int)

print(array1 + array2)
print(array1 - array2)
print(array1 * array2)
print(array1 // array2)
print(array1 % array2)
print(array1 ** array2)

"""#Floor, Ceil and Rint

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy as np
np.set_printoptions(legacy='1.13')
A = np.array(tuple(map(float,input().split())))
print("%s\n%s\n%s"%(np.floor(A),np.ceil(A),np.rint(A)))

"""#Sum and Prod

"""

import numpy as np
N,M = map(int,input().split())
print(np.prod(np.sum(np.array([list(map(int,input().split())) for _ in range(N)]),axis=0)))

"""#Min and Max

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy as np

n, m = map(int, input().split())
array = np.array([input().split() for _ in range(n)], int)

minimo = np.min(array, axis=1)
print(np.max(minimo))

"""#Mean, Var, and Std

"""

import numpy as np

n, m = map(int, input().split())

arr = [list(map(int, input().split()[:m])) for i in range(n)]

arr = np.array(arr)

print(np.mean(arr, axis = 1))

print(np.var(arr, axis = 0))

print(np.around(np.std(arr, axis = None),11))

"""#Dot and Cross

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy as np

n = int(input())
A = np.array([input().split() for _ in range(n)], int)
B = np.array([input().split() for _ in range(n)], int)

print(np.dot(A, B))

"""#Inner and Outer

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy as np

A = np.array(list(map(int, input().split())))
B = np.array(list(map(int, input().split())))

print(np.inner(A, B))
print(np.outer(A, B))

"""#Polynomials

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import numpy as np

coefficients = list(map(float, input().split()))
x = float(input())

print(np.polyval(coefficients, x))

"""#Linear Algebra

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT

import numpy

n = int(input())
a = [list(map(float, input().split())) for _ in range(n)]
a = numpy.array(a)

print(round(numpy.linalg.det(a), 2))

"""#String Validators

"""

# Input della stringa
s = input()

print(any(c.isalnum() for c in s))
print(any(c.isalpha() for c in s))
print(any(c.isdigit() for c in s))
print(any(c.islower() for c in s))
print(any(c.isupper() for c in s))

"""#Text Alignment

"""

thickness = int(input())
c = 'H'

# Top cone
for i in range(thickness):
    print((c*i).rjust(thickness-1) + c + (c*i).ljust(thickness-1))

# Top pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2) + (c*thickness).center(thickness*6))

# Middle section
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))

# Bottom pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2) + (c*thickness).center(thickness*6))

# Bottom cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness) + c + (c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

"""#Text Wrap

"""

def wrap(string, max_width):
    return textwrap.fill(string, max_width)

"""#Designer Door Mat

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
def print_design(N, M):

    for i in range(1, N, 2):
        print(('.|.' * i).center(M, '-'))


    print('WELCOME'.center(M, '-'))


    for i in range(N-2, 0, -2):
        print(('.|.' * i).center(M, '-'))

if __name__ == '__main__':
    N, M = map(int, input().split())
    print_design(N, M)

"""#String Formatting

"""

def print_formatted(number):

    width = len(bin(number)) - 2

    for i in range(1, number + 1):
        # Print the values in the specified format
        print(f"{i:>{width}} {oct(i)[2:]:>{width}} {hex(i)[2:].upper():>{width}} {bin(i)[2:]:>{width}}")

"""#Alphabet Rangoli

"""

def print_rangoli(n):
    a=[chr(i) for i in range(97,123)]
    t=1
    l=[]
    ch=a[n-t]
    for i in range(1,n):
        print("-".join(ch).center(1+4*(n-1),"-"))
        l.append("-".join(ch).center(1+4*(n-1),"-"))
        ch=ch[:i]+a[n-t-1]+ch[-i:]
        t+=1
    print("-".join(ch).center(1+4*(n-1),"-"))
    for i in l[::-1]:
        print(i)

"""#Capitalize!

"""

#!/bin/python3


def solve(s):
    # Split the input string by spaces, keeping the spacing intact
    words = s.split(' ')
    # Capitalize the first letter of each word
    capitalized_words = [word.capitalize() for word in words]
    # Join the words back together with spaces
    return ' '.join(capitalized_words)

"""#The Minion Game

"""

def minion_game(string):
    stuart = 0
    kevin = 0
    length = len(string)

    for position, letter in enumerate(string):
        if letter in 'AEIOU':
            kevin += length - position  # Kevin scores for substrings starting with vowels
        else:
            stuart += length - position  # Stuart scores for substrings starting with consonants

    if stuart > kevin:
        print(f'Stuart {stuart}')
    elif stuart < kevin:
        print(f'Kevin {kevin}')
    else:
        print('Draw')

"""#Merge the Tools!

"""

def merge_the_tools(s, k):
    # Loop through the string in chunks of size k
    for i in range(0, len(s), k):
        # Get the current substring of size k
        substring = s[i:i+k]
        # Create a list to keep track of unique characters
        unique_chars = []
        for char in substring:
            if char not in unique_chars:  # Check if character is not already in the list
                unique_chars.append(char)  # Add unique character
        # Join the list into a string and print it
        print(''.join(unique_chars))

"""#Set .symmetric_difference() Operation

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n = int(input())
english = set(map(int, input().split()))
b = int(input())
french = set(map(int, input().split()))
print(len(english.symmetric_difference(french)))

"""#Set Mutations

"""

if __name__ == '__main__':

    n = int(input())

    initial_set = set(map(int, input().split()))


    m = int(input())


    for _ in range(m):

        operation, _ = input().split()

        other_set = set(map(int, input().split()))


        if operation == 'update':
            initial_set.update(other_set)
        elif operation == 'intersection_update':
            initial_set.intersection_update(other_set)
        elif operation == 'difference_update':
            initial_set.difference_update(other_set)
        elif operation == 'symmetric_difference_update':
            initial_set.symmetric_difference_update(other_set)


    print(sum(initial_set))

"""#The Captain's Room

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
def find_captains_room(k, room_numbers):
    room_count = {}


    for room in room_numbers:
        if room in room_count:
            room_count[room] += 1
        else:
            room_count[room] = 1


    for room, count in room_count.items():
        if count == 1:
            return room

if __name__ == '__main__':
    k = int(input().strip())
    room_numbers = list(map(int, input().strip().split()))

    captain_room = find_captains_room(k, room_numbers)
    print(captain_room)

"""#Check Subset

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
def check_subset(test_cases):
    results = []
    for _ in range(test_cases):

        input()

        set_a = set(map(int, input().strip().split()))


        input()
        set_b = set(map(int, input().strip().split()))


        results.append(set_a.issubset(set_b))

    return results

if __name__ == '__main__':
    test_cases = int(input().strip())
    results = check_subset(test_cases)

    for result in results:
        print(result)

"""#Check Strict Superset

"""

l = set(map(int, input().split()))


n = int(input())
ss = True

for i in range(n):

    s = set(map(int, input().split()))


    if not (l.issuperset(s) and len(l) > len(s)):
        ss = False
        break
if ss:
    print("True")
else:
    print("False")

"""#Set .difference() Operation

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
# Read the number of English subscribers (not used directly)
num_english = int(input())


english_subscribers = set(map(int, input().split()))


num_french = int(input())

french_subscribers = set(map(int, input().split()))

only_english = english_subscribers.difference(french_subscribers)


print(len(only_english))

"""#Introduction to Sets

"""

def average(arr):
    # Create a set from the array to get distinct heights
    distinct_heights = set(arr)

    # Calculate the average of the distinct heights
    avg = sum(distinct_heights) / len(distinct_heights)

    # Return the average rounded to three decimal places
    return round(avg, 3)

# Read the input

    n = int(input())  # Size of the array
    arr = list(map(int, input().split()))  # Heights of the plants


    result = average(arr)
    print(result)

"""#Symmetric Difference

"""

m = int(input())


a = set(map(int, input().split()[:m]))

n = int(input())


b = set(map(int, input().split()[:n]))


result = a ^ b


for item in sorted(result):
    print(item)

"""#sWAP cASE

"""

def swap_case(s):
    new_string = ""  # Inizializziamo new_string
    for i in s:
        if i.isupper():
            new_string += i.lower()
        elif i.islower():
            new_string += i.upper()
        else:
            new_string += i

    return new_string

"""#String Split and Join

"""

def split_and_join(line):
    return "-".join(line.split(" "))


if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

"""#What's Your Name?

"""

def print_full_name(nome, cognome):
     print(f"Hello {nome} {cognome}! You just delved into python.")

"""#Mutations

"""

def mutate_string(string, position, character):

    return string[:position] + character + string[position+1:]

"""#Find a string

"""

def count_substring(string, sub_string):
    count = 0
    for i in range(len(string) - len(sub_string) + 1):
        if string[i:i+len(sub_string)] == sub_string:
            count += 1
    return count

"""#No Idea!

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
N, M = map(int, input().split())

elements = list(map(int, input().split()))

A = set(map(int, input().split()[:N]))

B = set(map(int, input().split()[:M]))

happiness = 0

for item in elements:
    if item in A:
        happiness += 1
    elif item in B:
        happiness -= 1

print(happiness)

"""#Set .add()

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n = int(input())

demo_list = []

for _ in range(n):
    demo_list.append(input().strip())

s = set(demo_list)

s = len(s)
print(s)

"""#Set .discard(), .remove() & .pop()

"""

n = int(input())
s = set(map(int, input().split()))
N = int(input())
for i in range(N):
    command = list(input().split())
    match command[0]:
        case 'pop':
            s.pop()
        case 'remove':
            if int(command[1]) in s:
                s.remove(int(command[1]))
        case 'discard':
            s.discard(int(command[1]))

print(sum(s))

"""#Set .intersection() Operation

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n = int(input())
A = set(input().split())
b = int(input())
B = set(input().split())
print(len(A&B))

"""#Calendar Module

"""

import calendar

def find_the_day(date):

    month, day, year = map(int, date.split())

    day_of_week = calendar.weekday(year, month, day)


    days = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']


    return days[day_of_week]

if __name__ == "__main__":
    date_input = input().strip()
    print(find_the_day(date_input))

"""#Time Delta

"""

import os
from datetime import datetime

def time_delta(t1, t2):
    format = '%a %d %b %Y %H:%M:%S %z'
    dt1 = datetime.strptime(t1, format)
    dt2 = datetime.strptime(t2, format)
    return str(abs(int((dt1 - dt2).total_seconds())))

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for _ in range(t):
        t1 = input()
        t2 = input()
        delta = time_delta(t1, t2)
        fptr.write(delta + '\n')
    fptr.close()

"""#Exceptions

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n=int(input())
for i in range(n):
    try:
        a,b= map(int, input().split())
        print(a//b)
    except ValueError as e:
        print("Error Code:",e)
    except ZeroDivisionError as e:
        print("Error Code:",e)

"""#Zipped!"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
n, s =(input()).split()
res=[]
for _ in range(int(s)):
    x=list(map(float, input().split()))
    res.append(x)
tup=(list(zip(*res)))
for i in tup:
    print(sum(i)/float(s))

"""#Athlete Sort

"""

#!/bin/python3

if __name__ == '__main__':
    n,m = map(int,input().split())
    arr = [tuple(map(int, input().rstrip().split())) for _ in range(n)]
    k = int(input())
    [print(*s) for s in sorted(arr,key = lambda x : x[k] )]

"""#ginortS

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
string = input()
sorted_lowercase = ''
sorted_uppercase = ''
sorted_odd = ''
sorted_even = ''

string = sorted(string)
for char in string:
    if char.islower():
        sorted_lowercase += char
    elif char.isupper():
        sorted_uppercase += char

    if char.isdigit() and int(char) % 2 is not 0:
        sorted_odd += char
    elif char.isdigit() and int(char) % 2 == 0:
        sorted_even += char


print(sorted_lowercase + sorted_uppercase + sorted_odd + sorted_even)

"""#Map and Lambda Function

"""

cube = lambda x:x**3

def fibonacci(n):
    arr = []
    for i in range(n):
        if i == 0 or i == 1:
            arr.append(i)
        else:
            x = arr[i-1] + arr[i - 2]
            arr.append(x)
    return arr

"""#Detect Floating Point Number

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
T = int(input())

for k in range (T) :
    x = 1
    s = input()

    try :
        y = float (s)
        if s.count(".") == 0 :
            x *= 0

    except :
        x *= 0

    print(bool(x))

"""#Re.split()

"""

regex_pattern = r"\D+"    # Do not delete 'r'.

"""#Group(), Groups() & Groupdict()

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re
s = input()
rx = re.compile(r"([a-zA-Z0-9])(?=\1)")
print(rx.search(s)[0] if rx.search(s) else -1)

"""#Re.findall() & Re.finditer()

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re
s=input()
pattern=r'([^aeiouAEIOU|\s|\+|\-]{1,})([aeiouAEIOU]{2,})([^aeiouAEIOU|\s|\+|\-]{1,}).*'
pattern2='([aeiouAEIOU]{2,})'
findall=re.findall(pattern,s)
if not findall:
    print("-1")
else:
    while findall:
        finditer=re.finditer(pattern,s)

        for i in finditer:
            print(i.groups()[1])
            x=re.search(pattern2,s)
            s=s[x.end():]
            findall=re.findall(pattern,s)

"""# Re.start() & Re.end()

"""

# Enter your code here. Read input from STDIN. Print output to STDOUt
import re
s,k = [input() for _ in range(2)]
p = r'(?=(%s))' % re.escape(k)
print("\n".join("(%s, %s)"%(match.start(1),match.end(1)-1) for match in re.finditer(p, s)) or "(-1, -1)")

"""#Regex Substitution

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re

n = int(input())
for _ in range(n):
    print(re.sub(r"(?<= )\|\|(?= )", "or", re.sub(r"(?<= )&&(?= )", "and", input())))

"""#Validating Roman Numerals

"""

regex_pattern = r"^(?!.*(I{4}|V{2,}|X{4}|L{2,}|C{4}|D{2,}|M{4})).*$"

"""#Validating phone numbers

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re

N = int(input())
for _ in range(N):
    phone_number = input().strip()
    if re.match(r'^[789]\d{9}$', phone_number):
        print("YES")
    else:
        print("NO")

"""#Validating and Parsing Email Addresses

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re
p =  r"^[a-zA-Z]+\s<[a-zA-Z][\w\.\-]*@[a-zA-Z]+\.[a-zA-Z]{1,3}>$"
[print(mail.group()) for mail in [re.match(p,input()) for _ in range(int(input()))] if mail]

"""#Hex Color Code

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re
css = [input().strip() for _ in range(int(input()))]
colors = [re.findall(r'#([\dA-F]{6}|[\dA-F]{3})(?=.*;)',line,re.IGNORECASE) for line in css]
[print(f"#{hx}") for group in colors for hx in group]

"""#HTML Parser - Part 1

"""

from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(f'Start : {tag}')
        for attr in attrs:
            print(f'-> {attr[0]} > {attr[1] if attr[1] is not None else "None"}')

    def handle_endtag(self, tag):
        print(f'End   : {tag}')

    def handle_startendtag(self, tag, attrs):
        print(f'Empty : {tag}')
        for attr in attrs:
            print(f'-> {attr[0]} > {attr[1] if attr[1] is not None else "None"}')

if __name__ == '__main__':
    n = int(input())
    parser = MyHTMLParser()
    for _ in range(n):
        line = input()
        parser.feed(line)

"""#HTML Parser - Part 2

"""

from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_comment(self, data: str) -> None:
        if not len(data.splitlines()) == 1:
            print('>>> Multi-line Comment')
            for line in data.splitlines():
                print(line)
        else:
            print('>>> Single-line Comment')
            print(data)

    def handle_data(self, data: str) -> None:
        if not data == '\n':
            print('>>> Data')
            for line in data.splitlines():
                print(line)


html = ""
for i in range(int(input())):
    html += input().rstrip()
    html += '\n'

parser = MyHTMLParser()
parser.feed(html)
parser.close()

"""#Detect HTML Tags, Attributes and Attribute Values"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print(tag)
        if attrs:
            [print(f'-> {attr[0]} > {attr[1]}') for attr in attrs]
    def handle_startendtag(self, tag, attrs):
        print(tag)
        if attrs:
            [print(f'-> {attr[0]} > {attr[1]}') for attr in attrs]

html = ""
for _ in range(int(input())):
    html += input().rstrip()
    html += '\n'

parser = MyHTMLParser()
parser.feed(html)
parser.close()

"""#Validating UID

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
def is_valid_uid(uid):
    if len(uid) != 10:
        return False
    upper_case = [ch for ch in uid if ch.isupper()]
    digits = [ch for ch in uid if ch.isdigit()]
    if len(upper_case) < 2 or len(digits) < 3:
        return False
    if not uid.isalnum():
        return False
    if len(set(uid)) != len(uid):
        return False
    return True

n = int(input())
for _ in range(n):
    uid = input().strip()
    if is_valid_uid(uid):
        print("Valid")
    else:
        print("Invalid")

"""#Validating Credit Card Numbers

"""

# Enter your code here. Read input from STDIN. Print output to STDOUT
import re

def check_cb(cnum):
    if not bool(re.match(r"^[4,5,6]",cnum)):return "Invalid"
    if not bool(re.match(r"^\d{4}-\d{4}-\d{4}-\d{4}$|^\d{4}\d{4}\d{4}\d{4}$",cnum)):return "Invalid"
    if bool(re.search(r'(.)\1{3}',re.sub(r'\D', '', cnum))):return "Invalid"
    return "Valid"
n = int(input())
print("\n".join([check_cb(input()) for _ in range(n)]))

"""#Validating Postal Codes

"""

regex_integer_in_range = r"^\d{6}$"	# Do not delete 'r'.
regex_alternating_repetitive_digit_pair = r"(\d)(?=\d\1)"
# Do not delete 'r'.

"""#Matrix Script

"""

#!/bin/python3

import math
import os
import random
import re
import sys

first_multiple_input = input().rstrip().split()
n = int(first_multiple_input[0])
m = int(first_multiple_input[1])

matrix = []
for _ in range(n):
    matrix_item = input()
    matrix.append(matrix_item)

decoded_string = ''.join([matrix[row][col] for col in range(m) for row in range(n)])
final_output = re.sub(r'(?<=\w)([^\w]+)(?=\w)', ' ', decoded_string)
print(final_output)

"""XML 1 - Find the Score

"""

def get_attr_number(node):
    return len(node.attrib) + sum(get_attr_number(child) for child in node)

"""#XML2 - Find the Maximum Depth

"""

maxdepth = 0
def depth(elem, level):
    global maxdepth
    level = level + 1
    for e in elem:
        depth(e, level)
    if(level > maxdepth):
        maxdepth = level

"""# Standardize Mobile Number Using Decorators

"""

from re import sub

from re import sub

def wrapper(f):
    r = r"^(?:\+?91|0)?(\d{5})(\d{5})$"
    s = r"+91 \1 \2"

    def fun(li):
        return f([sub(r, s, i) for i in li if sub(r, s, i)])
    return fun

def sort_and_print_numbers(numbers):
    for number in sorted(numbers):
        print(number)

"""#Decorators 2 - Name Directory

"""

def person_lister(f):
    def inner(people):
        return [f(person) for person in sorted(people, key=lambda x: int(x[2]))]
    return inner

"""#Insertion Sort - Part 2

"""

#!/bin/python3

def insertionSort2(n, arr):
    for i in range(1, n):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
        print(" ".join(map(str, arr)))

if __name__ == '__main__':
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    insertionSort2(n, arr)

"""#Text Alignment

"""

thickness = int(input())
c = 'H'

# Top cone
for i in range(thickness):
    print((c*i).rjust(thickness-1) + c + (c*i).ljust(thickness-1))

# Top pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2) + (c*thickness).center(thickness*6))

# Middle section
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))

# Bottom pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2) + (c*thickness).center(thickness*6))

# Bottom cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness) + c + (c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

"""#Birthday Cake Candles

"""

#!/bin/python3
import os

def birthdayCakeCandles(candles):
    highestValue = max(candles)
    count = candles.count(highestValue)
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    candles_count = int(input().strip())
    candles = list(map(int, input().rstrip().split()))

    result = birthdayCakeCandles(candles)

    fptr.write(str(result) + '\n')
    fptr.close()

"""#Number Line Jumps

"""

#!/bin/python3

import os

def kangaroo(x1, v1, x2, v2):
    if (v1 - v2) == 0:
        return "NO"
    result = (x2 - x1) / (v1 - v2)
    return "YES" if result > 0 and result.is_integer() else "NO"

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    x1 = int(first_multiple_input[0])
    v1 = int(first_multiple_input[1])
    x2 = int(first_multiple_input[2])
    v2 = int(first_multiple_input[3])

    result = kangaroo(x1, v1, x2, v2)

    fptr.write(result + '\n')
    fptr.close()

"""#Viral Advertising

"""

def annuncio(n):
    condivisioni = 5
    mipiace = 0

    for day in range(1, n+1):
        liked = condivisioni // 2
        mipiace += liked
        condivisioni = liked * 3

    return mipiace
if __name__ == '__main__':
    n = int(input().strip())
    result = annuncio(n)
    print(result)

"""#Recursive Digit Sum

"""

def superDigit(n, k):
    p = str(sum(int(digit) for digit in n) * k)

    if len(p) == 1:
        return int(p)
    else:
        return superDigit(p, 1)

if __name__ == '__main__':
    first_multiple_input = input().rstrip().split()

    n = first_multiple_input[0]
    k = int(first_multiple_input[1])

    result = superDigit(n, k)

    print(result)

"""# Insertion Sort - Part 1

"""

#!/bin/python3

def insertionSort1(n, arr):
    value = arr[-1]
    i = n - 2
    while i >= 0 and arr[i] > value:
        arr[i + 1] = arr[i]
        print(" ".join(map(str, arr)))
        i -= 1
    arr[i + 1] = value
    print(" ".join(map(str, arr)))

if __name__ == '__main__':
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    insertionSort1(n, arr)